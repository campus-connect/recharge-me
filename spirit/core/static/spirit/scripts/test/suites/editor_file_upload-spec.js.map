{"version":3,"file":"editor_file_upload-spec.js","sources":["editor_file_upload-spec.coffee"],"names":[],"mappings":"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","sourcesContent":["describe \"editor file upload plugin tests\", ->\n    textarea = null\n    post = null\n    editor = null\n    dialog = null\n    responseData = null\n\n    triggerFakeUpload = (name='foo.doc') ->\n        inputFileOrg = editor.inputFile\n        try\n            editor.inputFile = {files: [{name: name}]}\n            evt = document.createEvent(\"HTMLEvents\")\n            evt.initEvent(\"change\", false, true)\n            inputFileOrg.dispatchEvent(evt)\n        finally\n            editor.inputFile = inputFileOrg\n\n    beforeEach ->\n        fixtures = jasmine.getFixtures()\n        fixtures.fixturesPath = 'base/test/fixtures/'\n        loadFixtures('editor.html')\n\n        responseData = {url: '/path/foo'}\n\n        post = spyOn(window, 'fetch')\n        post.and.callFake( -> {\n            then: (func) ->\n                data = func({ok: true, json: -> responseData})\n                return {\n                    then: (func) ->\n                        func(data)\n                        return {\n                            catch: -> return\n                        }\n                }\n        })\n\n        editor = stModules.editorFileUpload(document.querySelectorAll('.js-reply'), {\n            csrfToken: \"foo csrf_token\",\n            target: \"/foo/\",\n            placeholderText: \"foo uploading {name}\",\n            allowedFileMedia: \".doc,.docx,.pdf\"\n        })[0]\n        textarea = document.querySelector('textarea')\n\n        # Prevent popup\n        dialog = spyOn(editor.inputFile, 'click')\n        dialog.and.callFake( -> return)\n\n    it \"opens the file choose dialog\", ->\n        dialog.calls.reset()\n        document.querySelector('.js-box-file').click()\n        expect(dialog).toHaveBeenCalled()\n\n    it \"uploads the file\", ->\n        post.calls.reset()\n\n        formDataMock = jasmine.createSpyObj('formDataMock', ['append', ])\n        spyOn(window, \"FormData\").and.returnValue(formDataMock)\n\n        triggerFakeUpload('foo.doc')\n        expect(post.calls.any()).toEqual(true)\n        expect(post.calls.argsFor(0)[0]).toEqual('/foo/')\n        expect(post.calls.argsFor(0)[1].body).toEqual(formDataMock)\n        expect(formDataMock.append).toHaveBeenCalledWith('csrfmiddlewaretoken', 'foo csrf_token')\n        expect(formDataMock.append).toHaveBeenCalledWith('file', {name : 'foo.doc'})\n\n    it \"changes the placeholder on upload success\", ->\n        textarea.value = \"foobar\"\n        triggerFakeUpload('foo.doc')\n        expect(textarea.value).toEqual(\"foobar[foo.doc](/path/foo)\")\n\n    it \"changes the placeholder on upload error\", ->\n        textarea.value = \"foobar\"\n        responseData = {error: {foo: 'foo error'}}\n        triggerFakeUpload('foo.doc')\n        expect(textarea.value).toEqual('foobar[{\"foo\":\"foo error\"}]()')\n\n    it \"changes the placeholder on upload failure\", ->\n        post.calls.reset()\n        textarea.value = \"foobar\"\n\n        post.and.callFake( -> {\n            then: (func) ->\n                try\n                    func({ok: false, status: 500, statusText: 'foo error'})\n                catch err\n                    return {\n                        then: -> {\n                            catch: (func) -> func(err)\n                        }\n                    }\n        })\n        log = spyOn(console, 'log')\n        log.and.callFake( -> )\n\n        triggerFakeUpload('foo.doc')\n        expect(post.calls.any()).toEqual(true)\n        expect(textarea.value).toEqual(\"foobar[error: 500 foo error]()\")\n        expect(log.calls.argsFor(0)[0]).toEqual('error: 500 foo error')\n\n    it \"checks for default media file extensions if none are provided\", ->\n        expect(editor.inputFile.accept).toEqual(\".doc,.docx,.pdf\")\n\n    it \"checks for custom media file extensions if they are provided\", ->\n        editor = stModules.editorFileUpload(document.querySelectorAll('.js-reply'), {\n            allowedFileMedia: \".superdoc\"\n        })[0]\n        expect(editor.inputFile.accept).toEqual(\".superdoc\")\n\n    it \"has correct meta data\", ->\n        expect(editor.meta).toEqual({\n            fieldName: \"file\",\n            tag: \"[{text}]({url})\",\n            elm: \".js-box-file\"\n        })\n"]}