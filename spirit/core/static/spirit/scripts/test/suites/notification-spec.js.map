{"version":3,"file":"notification-spec.js","sources":["notification-spec.coffee"],"names":[],"mappings":"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","sourcesContent":["describe \"notification plugin tests\", ->\n    responseData = null\n    get = null\n    tab = null\n\n    isHidden = stModules.utils.isHidden\n\n    beforeEach ->\n        fixtures = jasmine.getFixtures()\n        fixtures.fixturesPath = 'base/test/fixtures/'\n        loadFixtures('notification.html')\n\n        responseData = {\n            n: [{\n                user: \"username\",\n                action: 1,\n                title: \"title\",\n                url: \"/foobar/\",\n                is_read: true\n            }]\n        }\n\n        get = spyOn(window, 'fetch')\n        get.and.callFake( -> {\n            then: (func) ->\n                data = func({ok: true, json: -> responseData})\n                return {\n                    then: (func) ->\n                        func(data)\n                        return {catch: -> {then: (func) -> func()}}\n                }\n        })\n\n        tab = document.querySelector('.js-tab-notification')\n        stModules.notification([tab], {\n            notificationUrl: \"/foo/\",\n            notificationListUrl: \"/foo/list/\",\n            mentionTxt: \"{user} foo you on {topic}\",\n            commentTxt: \"{user} has bar on {topic}\",\n            showAll: \"foo Show all\",\n            empty: \"foo empty\",\n            unread: \"foo unread\"\n        })\n\n    it \"gets the notifications\", ->\n        get.calls.reset()\n\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(get.calls.argsFor(0)[0]).toEqual('/foo/')\n\n        # making multiple clicks do nothing\n        get.calls.reset()\n        tab.click()\n        expect(get.calls.count()).toEqual(0)\n\n    it \"avoids XSS from topic title\", ->\n        get.calls.reset()\n\n        responseData = {\n            n: [{\n                user: \"username\",  # Username is safe\n                action: 1,\n                title: '<bad>\"bad\"</bad>',\n                url: \"/foobar/\",  # URL is safe\n                is_read: true\n            }]\n        }\n\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(document.querySelector('.js-notifications-content').innerHTML).toEqual(\n            '<div>username foo you on <a href=\"/foobar/\">&lt;bad&gt;\"bad\"&lt;/bad&gt;</a></div>' +\n            '<div><a href=\"/foo/list/\">foo Show all</a></div>')\n\n    it \"shows mention notifications\", ->\n        get.calls.reset()\n\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(document.querySelector('.js-notifications-content').innerHTML).toEqual(\n            '<div>username foo you on <a href=\"/foobar/\">title</a></div>' +\n            '<div><a href=\"/foo/list/\">foo Show all</a></div>')\n\n    it \"shows comment notifications\", ->\n        responseData.n[0].action = 2\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(document.querySelector('.js-notifications-content').innerHTML).toEqual(\n            '<div>username has bar on <a href=\"/foobar/\">title</a></div>' +\n            '<div><a href=\"/foo/list/\">foo Show all</a></div>')\n\n    it \"marks unread notifications\", ->\n        responseData.n[0].is_read = false\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(document.querySelector('.js-notifications-content').innerHTML).toEqual(\n            '<div>username foo you on <a href=\"/foobar/\">title</a> ' +\n            '<span class=\"row-unread\">foo unread</span></div>' +\n            '<div><a href=\"/foo/list/\">foo Show all</a></div>')\n\n    it \"shows an error on server error\", ->\n        log = spyOn(console, 'log')\n        log.and.callFake( -> )\n\n        get.and.callFake( -> {\n            then: (func) ->\n                try\n                    func({ok: false, status: 500, statusText: 'server error'})\n                catch err\n                    return {\n                        then: -> {\n                            catch: (func) ->\n                                func(err)\n                                return {then: (func) -> func()}\n                        }\n                    }\n        })\n\n        tab.click()\n        expect(get.calls.count()).toEqual(1)\n        expect(document.querySelector('.js-notifications-content').innerHTML).toEqual(\n            '<div>error: 500 server error</div>')\n\n    # todo: uncomment once tab.coffee is refactored\n\n    #it \"shows tab content and is selected on click\", ->\n    #    expect(tab.classList.contains(\"is-selected\")).toEqual(false)\n    #    expect(isHidden(document.querySelectorAll('.js-notifications-content'))).toEqual(true)\n    #\n    #    tab.click()\n    #    expect(tab.classList.contains(\"is-selected\")).toEqual(true)\n    #    expect(isHidden(document.querySelectorAll('.js-notifications-content'))).toEqual(false)\n\n    it \"prevents the default click behaviour\", ->\n        evt = document.createEvent(\"HTMLEvents\")\n        evt.initEvent(\"click\", false, true)\n\n        stopPropagation = spyOn(evt, 'stopPropagation')\n        preventDefault = spyOn(evt, 'preventDefault')\n\n        tab.dispatchEvent(evt)\n        expect(stopPropagation).toHaveBeenCalled()\n        expect(preventDefault).toHaveBeenCalled()\n"]}