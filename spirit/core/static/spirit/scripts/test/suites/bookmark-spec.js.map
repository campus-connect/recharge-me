{"version":3,"file":"bookmark-spec.js","sources":["bookmark-spec.coffee"],"names":[],"mappings":"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","sourcesContent":["describe \"bookmark plugin tests\", ->\n    comments = null\n    bookmarks = null\n    mark = null\n    Bookmark = null\n    Mark = null\n    post = null\n\n    beforeEach ->\n        fixtures = jasmine.getFixtures()\n        fixtures.fixturesPath = 'base/test/fixtures/'\n        loadFixtures('bookmark.html')\n\n        # Promise is async, so must callFake a sync thing\n        post = spyOn(window, 'fetch')\n        post.and.callFake( -> {\n            then: (func) ->\n                func({ok: true})\n                return {\n                    catch: -> {then: (func) -> func()}\n                }\n        })\n\n        comments = document.querySelectorAll('.comment')\n        bookmarks = stModules.bookmark(comments, {\n            csrfToken: \"foobar\",\n            target: \"/foo/\"\n        })\n        mark = bookmarks[0].mark\n        Bookmark = stModules.Bookmark\n        Mark = stModules.Mark\n\n        # Trigger all waypoints\n        bookmarks.forEach((bm) ->\n            bm.onWaypoint()\n        )\n\n    it \"sends the first comment number\", ->\n        expect(post.calls.any()).toEqual(true)\n        expect(post.calls.argsFor(0)[0]).toEqual('/foo/')\n        expect(post.calls.argsFor(0)[1].body.get('csrfmiddlewaretoken')).toEqual(\"foobar\")\n        expect(post.calls.argsFor(0)[1].body.get('comment_number')).toEqual('1')\n\n    it \"stores the last comment number\", ->\n        expect(mark.commentNumber).toEqual(2)\n\n    it \"stores the same mark in every comment\", ->\n        bookmark_1 = bookmarks[0]\n        bookmark_2 = bookmarks[bookmarks.length - 1]\n        expect(bookmark_1.mark).toEqual(bookmark_2.mark)\n\n    it \"does not post on scroll up\", ->\n        post.calls.reset()\n        bookmark_1 = bookmarks[0]\n        bookmark_1.onWaypoint()\n        expect(mark.commentNumber).toEqual(2)\n        expect(post.calls.any()).toEqual(false)\n\n    it \"does post on scroll down\", ->\n        post.calls.reset()\n        bookmark_2 = bookmarks[bookmarks.length - 1]\n        bookmark_2.number = 999\n        bookmark_2.onWaypoint()\n        expect(mark.commentNumber).toEqual(999)\n        expect(post.calls.any()).toEqual(true)\n\n    it \"gets the comment number from the address bar\", ->\n        org_location_hash = window.location.hash\n        window.location.hash = \"\"\n        try\n            window.location.hash = \"http://example.com/foo/#c5\"\n            newMark = new Mark()\n            # it substract 1 from the real comment number\n            expect(newMark.commentNumber).toEqual 4\n\n            window.location.hash = \"http://example.com/foo/\"\n            newMark = new Mark()\n            expect(newMark.commentNumber).toEqual 0\n\n            window.location.hash = \"http://example.com/foo/#foobar5\"\n            newMark = new Mark()\n            expect(newMark.commentNumber).toEqual 0\n        finally\n            window.location.hash = org_location_hash\n\n    it \"sends only one comment number in a given time\", ->\n        post.calls.reset()\n        expect(post.calls.any()).toEqual(false)\n\n        # won't post if already sending\n        mark.commentNumber = 0\n        bookmark_2 = bookmarks[bookmarks.length - 1]\n        mark.isSending = true\n        bookmark_2.onWaypoint()\n        expect(post.calls.any()).toEqual(false)\n\n        mark.commentNumber = 0\n        post.calls.reset()\n        mark.isSending = false\n        bookmark_2.onWaypoint()\n        expect(post.calls.any()).toEqual(true)\n        expect(mark.isSending).toEqual(false)\n\n    it \"sends current comment number after sending previous when current > previous\", ->\n        post.calls.reset()\n        expect(post.calls.any()).toEqual(false)\n\n        post.and.callFake( -> {\n            then: (func) ->\n                # isSending == true, so this should just put it in queue\n                bookmark_2 = bookmarks[bookmarks.length - 1]\n                bookmark_2.onWaypoint()\n                func({ok: true})\n                return {\n                    catch: -> {then: (func) -> func()}\n                }\n        })\n\n        mark.commentNumber = -1\n        bookmark_1 = bookmarks[0]\n        bookmark_1.onWaypoint()\n        expect(post.calls.count()).toEqual(2)\n        expect(post.calls.argsFor(0)[1].body.get('comment_number')).toEqual('1')\n        expect(post.calls.argsFor(1)[1].body.get('comment_number')).toEqual('2')\n\n        # Should do nothing\n        post.calls.reset()\n        bookmark_1.onWaypoint()\n        expect(post.calls.any()).toEqual(false)\n\n    it \"sends next after server error\", ->\n        post.calls.reset()\n        expect(post.calls.any()).toEqual(false)\n\n        post.and.callFake( -> {\n            then: ->\n                # isSending == true, so this should just put it in queue\n                bookmark_2 = bookmarks[bookmarks.length - 1]\n                bookmark_2.onWaypoint()\n                return {\n                    catch: (func) ->\n                      func({message: 'connection error'})\n                      return {then: (func) -> func()}\n                }\n        })\n\n        log = spyOn(console, 'log')\n        log.and.callFake( -> )\n\n        mark.commentNumber = -1\n        bookmark_1 = bookmarks[0]\n        bookmark_1.onWaypoint()\n        expect(post.calls.count()).toEqual(2)\n        expect(post.calls.argsFor(0)[1].body.get('comment_number')).toEqual('1')\n        expect(post.calls.argsFor(1)[1].body.get('comment_number')).toEqual('2')\n\n        expect(log.calls.count()).toEqual(2)\n        expect(log.calls.argsFor(0)[0]).toEqual('connection error')\n        expect(log.calls.argsFor(1)[0]).toEqual('connection error')\n"]}